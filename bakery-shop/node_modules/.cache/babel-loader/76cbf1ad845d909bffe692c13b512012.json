{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isTaxID;\n\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\n\nvar algorithms = _interopRequireWildcard(require(\"./util/algorithms\"));\n\nvar _isDate = _interopRequireDefault(require(\"./isDate\"));\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n/**\n * TIN Validation\n * Validates Tax Identification Numbers (TINs) from the US, EU member states and the United Kingdom.\n *\n * EU-UK:\n * National TIN validity is calculated using public algorithms as made available by DG TAXUD.\n *\n * See `https://ec.europa.eu/taxation_customs/tin/specs/FS-TIN%20Algorithms-Public.docx` for more information.\n *\n * US:\n * An Employer Identification Number (EIN), also known as a Federal Tax Identification Number,\n *  is used to identify a business entity.\n *\n * NOTES:\n *  - Prefix 47 is being reserved for future use\n *  - Prefixes 26, 27, 45, 46 and 47 were previously assigned by the Philadelphia campus.\n *\n * See `http://www.irs.gov/Businesses/Small-Businesses-&-Self-Employed/How-EINs-are-Assigned-and-Valid-EIN-Prefixes`\n * for more information.\n */\n// Locale functions\n\n/*\n * bg-BG validation function\n * (Edinen graždanski nomer (EGN/ЕГН), persons only)\n * Checks if birth date (first six digits) is valid and calculates check (last) digit\n */\n\n\nfunction bgBgCheck(tin) {\n  // Extract full year, normalize month and check birth date validity\n  var century_year = tin.slice(0, 2);\n  var month = parseInt(tin.slice(2, 4), 10);\n\n  if (month > 40) {\n    month -= 40;\n    century_year = \"20\".concat(century_year);\n  } else if (month > 20) {\n    month -= 20;\n    century_year = \"18\".concat(century_year);\n  } else {\n    century_year = \"19\".concat(century_year);\n  }\n\n  if (month < 10) {\n    month = \"0\".concat(month);\n  }\n\n  var date = \"\".concat(century_year, \"/\").concat(month, \"/\").concat(tin.slice(4, 6));\n\n  if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {\n    return false;\n  } // split digits into an array for further processing\n\n\n  var digits = tin.split('').map(function (a) {\n    return parseInt(a, 10);\n  }); // Calculate checksum by multiplying digits with fixed values\n\n  var multip_lookup = [2, 4, 8, 5, 10, 9, 7, 3, 6];\n  var checksum = 0;\n\n  for (var i = 0; i < multip_lookup.length; i++) {\n    checksum += digits[i] * multip_lookup[i];\n  }\n\n  checksum = checksum % 11 === 10 ? 0 : checksum % 11;\n  return checksum === digits[9];\n}\n/**\n * Check if an input is a valid Canadian SIN (Social Insurance Number)\n *\n * The Social Insurance Number (SIN) is a 9 digit number that\n * you need to work in Canada or to have access to government programs and benefits.\n *\n * https://en.wikipedia.org/wiki/Social_Insurance_Number\n * https://www.canada.ca/en/employment-social-development/services/sin.html\n * https://www.codercrunch.com/challenge/819302488/sin-validator\n *\n * @param {string} input\n * @return {boolean}\n */\n\n\nfunction isCanadianSIN(input) {\n  var digitsArray = input.split('');\n  var even = digitsArray.filter(function (_, idx) {\n    return idx % 2;\n  }).map(function (i) {\n    return Number(i) * 2;\n  }).join('').split('');\n  var total = digitsArray.filter(function (_, idx) {\n    return !(idx % 2);\n  }).concat(even).map(function (i) {\n    return Number(i);\n  }).reduce(function (acc, cur) {\n    return acc + cur;\n  });\n  return total % 10 === 0;\n}\n/*\n * cs-CZ validation function\n * (Rodné číslo (RČ), persons only)\n * Checks if birth date (first six digits) is valid and divisibility by 11\n * Material not in DG TAXUD document sourced from:\n * -`https://lorenc.info/3MA381/overeni-spravnosti-rodneho-cisla.htm`\n * -`https://www.mvcr.cz/clanek/rady-a-sluzby-dokumenty-rodne-cislo.aspx`\n */\n\n\nfunction csCzCheck(tin) {\n  tin = tin.replace(/\\W/, ''); // Extract full year from TIN length\n\n  var full_year = parseInt(tin.slice(0, 2), 10);\n\n  if (tin.length === 10) {\n    if (full_year < 54) {\n      full_year = \"20\".concat(full_year);\n    } else {\n      full_year = \"19\".concat(full_year);\n    }\n  } else {\n    if (tin.slice(6) === '000') {\n      return false;\n    } // Three-zero serial not assigned before 1954\n\n\n    if (full_year < 54) {\n      full_year = \"19\".concat(full_year);\n    } else {\n      return false; // No 18XX years seen in any of the resources\n    }\n  } // Add missing zero if needed\n\n\n  if (full_year.length === 3) {\n    full_year = [full_year.slice(0, 2), '0', full_year.slice(2)].join('');\n  } // Extract month from TIN and normalize\n\n\n  var month = parseInt(tin.slice(2, 4), 10);\n\n  if (month > 50) {\n    month -= 50;\n  }\n\n  if (month > 20) {\n    // Month-plus-twenty was only introduced in 2004\n    if (parseInt(full_year, 10) < 2004) {\n      return false;\n    }\n\n    month -= 20;\n  }\n\n  if (month < 10) {\n    month = \"0\".concat(month);\n  } // Check date validity\n\n\n  var date = \"\".concat(full_year, \"/\").concat(month, \"/\").concat(tin.slice(4, 6));\n\n  if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {\n    return false;\n  } // Verify divisibility by 11\n\n\n  if (tin.length === 10) {\n    if (parseInt(tin, 10) % 11 !== 0) {\n      // Some numbers up to and including 1985 are still valid if\n      // check (last) digit equals 0 and modulo of first 9 digits equals 10\n      var checkdigit = parseInt(tin.slice(0, 9), 10) % 11;\n\n      if (parseInt(full_year, 10) < 1986 && checkdigit === 10) {\n        if (parseInt(tin.slice(9), 10) !== 0) {\n          return false;\n        }\n      } else {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n/*\n * de-AT validation function\n * (Abgabenkontonummer, persons/entities)\n * Verify TIN validity by calling luhnCheck()\n */\n\n\nfunction deAtCheck(tin) {\n  return algorithms.luhnCheck(tin);\n}\n/*\n * de-DE validation function\n * (Steueridentifikationsnummer (Steuer-IdNr.), persons only)\n * Tests for single duplicate/triplicate value, then calculates ISO 7064 check (last) digit\n * Partial implementation of spec (same result with both algorithms always)\n */\n\n\nfunction deDeCheck(tin) {\n  // Split digits into an array for further processing\n  var digits = tin.split('').map(function (a) {\n    return parseInt(a, 10);\n  }); // Fill array with strings of number positions\n\n  var occurences = [];\n\n  for (var i = 0; i < digits.length - 1; i++) {\n    occurences.push('');\n\n    for (var j = 0; j < digits.length - 1; j++) {\n      if (digits[i] === digits[j]) {\n        occurences[i] += j;\n      }\n    }\n  } // Remove digits with one occurence and test for only one duplicate/triplicate\n\n\n  occurences = occurences.filter(function (a) {\n    return a.length > 1;\n  });\n\n  if (occurences.length !== 2 && occurences.length !== 3) {\n    return false;\n  } // In case of triplicate value only two digits are allowed next to each other\n\n\n  if (occurences[0].length === 3) {\n    var trip_locations = occurences[0].split('').map(function (a) {\n      return parseInt(a, 10);\n    });\n    var recurrent = 0; // Amount of neighbour occurences\n\n    for (var _i = 0; _i < trip_locations.length - 1; _i++) {\n      if (trip_locations[_i] + 1 === trip_locations[_i + 1]) {\n        recurrent += 1;\n      }\n    }\n\n    if (recurrent === 2) {\n      return false;\n    }\n  }\n\n  return algorithms.iso7064Check(tin);\n}\n/*\n * dk-DK validation function\n * (CPR-nummer (personnummer), persons only)\n * Checks if birth date (first six digits) is valid and assigned to century (seventh) digit,\n * and calculates check (last) digit\n */\n\n\nfunction dkDkCheck(tin) {\n  tin = tin.replace(/\\W/, ''); // Extract year, check if valid for given century digit and add century\n\n  var year = parseInt(tin.slice(4, 6), 10);\n  var century_digit = tin.slice(6, 7);\n\n  switch (century_digit) {\n    case '0':\n    case '1':\n    case '2':\n    case '3':\n      year = \"19\".concat(year);\n      break;\n\n    case '4':\n    case '9':\n      if (year < 37) {\n        year = \"20\".concat(year);\n      } else {\n        year = \"19\".concat(year);\n      }\n\n      break;\n\n    default:\n      if (year < 37) {\n        year = \"20\".concat(year);\n      } else if (year > 58) {\n        year = \"18\".concat(year);\n      } else {\n        return false;\n      }\n\n      break;\n  } // Add missing zero if needed\n\n\n  if (year.length === 3) {\n    year = [year.slice(0, 2), '0', year.slice(2)].join('');\n  } // Check date validity\n\n\n  var date = \"\".concat(year, \"/\").concat(tin.slice(2, 4), \"/\").concat(tin.slice(0, 2));\n\n  if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {\n    return false;\n  } // Split digits into an array for further processing\n\n\n  var digits = tin.split('').map(function (a) {\n    return parseInt(a, 10);\n  });\n  var checksum = 0;\n  var weight = 4; // Multiply by weight and add to checksum\n\n  for (var i = 0; i < 9; i++) {\n    checksum += digits[i] * weight;\n    weight -= 1;\n\n    if (weight === 1) {\n      weight = 7;\n    }\n  }\n\n  checksum %= 11;\n\n  if (checksum === 1) {\n    return false;\n  }\n\n  return checksum === 0 ? digits[9] === 0 : digits[9] === 11 - checksum;\n}\n/*\n * el-CY validation function\n * (Arithmos Forologikou Mitroou (AFM/ΑΦΜ), persons only)\n * Verify TIN validity by calculating ASCII value of check (last) character\n */\n\n\nfunction elCyCheck(tin) {\n  // split digits into an array for further processing\n  var digits = tin.slice(0, 8).split('').map(function (a) {\n    return parseInt(a, 10);\n  });\n  var checksum = 0; // add digits in even places\n\n  for (var i = 1; i < digits.length; i += 2) {\n    checksum += digits[i];\n  } // add digits in odd places\n\n\n  for (var _i2 = 0; _i2 < digits.length; _i2 += 2) {\n    if (digits[_i2] < 2) {\n      checksum += 1 - digits[_i2];\n    } else {\n      checksum += 2 * (digits[_i2] - 2) + 5;\n\n      if (digits[_i2] > 4) {\n        checksum += 2;\n      }\n    }\n  }\n\n  return String.fromCharCode(checksum % 26 + 65) === tin.charAt(8);\n}\n/*\n * el-GR validation function\n * (Arithmos Forologikou Mitroou (AFM/ΑΦΜ), persons/entities)\n * Verify TIN validity by calculating check (last) digit\n * Algorithm not in DG TAXUD document- sourced from:\n * - `http://epixeirisi.gr/%CE%9A%CE%A1%CE%99%CE%A3%CE%99%CE%9C%CE%91-%CE%98%CE%95%CE%9C%CE%91%CE%A4%CE%91-%CE%A6%CE%9F%CE%A1%CE%9F%CE%9B%CE%9F%CE%93%CE%99%CE%91%CE%A3-%CE%9A%CE%91%CE%99-%CE%9B%CE%9F%CE%93%CE%99%CE%A3%CE%A4%CE%99%CE%9A%CE%97%CE%A3/23791/%CE%91%CF%81%CE%B9%CE%B8%CE%BC%CF%8C%CF%82-%CE%A6%CE%BF%CF%81%CE%BF%CE%BB%CE%BF%CE%B3%CE%B9%CE%BA%CE%BF%CF%8D-%CE%9C%CE%B7%CF%84%CF%81%CF%8E%CE%BF%CF%85`\n */\n\n\nfunction elGrCheck(tin) {\n  // split digits into an array for further processing\n  var digits = tin.split('').map(function (a) {\n    return parseInt(a, 10);\n  });\n  var checksum = 0;\n\n  for (var i = 0; i < 8; i++) {\n    checksum += digits[i] * Math.pow(2, 8 - i);\n  }\n\n  return checksum % 11 % 10 === digits[8];\n}\n/*\n * en-GB validation function (should go here if needed)\n * (National Insurance Number (NINO) or Unique Taxpayer Reference (UTR),\n * persons/entities respectively)\n */\n\n/*\n * en-IE validation function\n * (Personal Public Service Number (PPS No), persons only)\n * Verify TIN validity by calculating check (second to last) character\n */\n\n\nfunction enIeCheck(tin) {\n  var checksum = algorithms.reverseMultiplyAndSum(tin.split('').slice(0, 7).map(function (a) {\n    return parseInt(a, 10);\n  }), 8);\n\n  if (tin.length === 9 && tin[8] !== 'W') {\n    checksum += (tin[8].charCodeAt(0) - 64) * 9;\n  }\n\n  checksum %= 23;\n\n  if (checksum === 0) {\n    return tin[7].toUpperCase() === 'W';\n  }\n\n  return tin[7].toUpperCase() === String.fromCharCode(64 + checksum);\n} // Valid US IRS campus prefixes\n\n\nvar enUsCampusPrefix = {\n  andover: ['10', '12'],\n  atlanta: ['60', '67'],\n  austin: ['50', '53'],\n  brookhaven: ['01', '02', '03', '04', '05', '06', '11', '13', '14', '16', '21', '22', '23', '25', '34', '51', '52', '54', '55', '56', '57', '58', '59', '65'],\n  cincinnati: ['30', '32', '35', '36', '37', '38', '61'],\n  fresno: ['15', '24'],\n  internet: ['20', '26', '27', '45', '46', '47'],\n  kansas: ['40', '44'],\n  memphis: ['94', '95'],\n  ogden: ['80', '90'],\n  philadelphia: ['33', '39', '41', '42', '43', '46', '48', '62', '63', '64', '66', '68', '71', '72', '73', '74', '75', '76', '77', '81', '82', '83', '84', '85', '86', '87', '88', '91', '92', '93', '98', '99'],\n  sba: ['31']\n}; // Return an array of all US IRS campus prefixes\n\nfunction enUsGetPrefixes() {\n  var prefixes = [];\n\n  for (var location in enUsCampusPrefix) {\n    // https://github.com/gotwarlost/istanbul/blob/master/ignoring-code-for-coverage.md#ignoring-code-for-coverage-purposes\n    // istanbul ignore else\n    if (enUsCampusPrefix.hasOwnProperty(location)) {\n      prefixes.push.apply(prefixes, _toConsumableArray(enUsCampusPrefix[location]));\n    }\n  }\n\n  return prefixes;\n}\n/*\n * en-US validation function\n * Verify that the TIN starts with a valid IRS campus prefix\n */\n\n\nfunction enUsCheck(tin) {\n  return enUsGetPrefixes().indexOf(tin.slice(0, 2)) !== -1;\n}\n/*\n * es-ES validation function\n * (Documento Nacional de Identidad (DNI)\n * or Número de Identificación de Extranjero (NIE), persons only)\n * Verify TIN validity by calculating check (last) character\n */\n\n\nfunction esEsCheck(tin) {\n  // Split characters into an array for further processing\n  var chars = tin.toUpperCase().split(''); // Replace initial letter if needed\n\n  if (isNaN(parseInt(chars[0], 10)) && chars.length > 1) {\n    var lead_replace = 0;\n\n    switch (chars[0]) {\n      case 'Y':\n        lead_replace = 1;\n        break;\n\n      case 'Z':\n        lead_replace = 2;\n        break;\n\n      default:\n    }\n\n    chars.splice(0, 1, lead_replace); // Fill with zeros if smaller than proper\n  } else {\n    while (chars.length < 9) {\n      chars.unshift(0);\n    }\n  } // Calculate checksum and check according to lookup\n\n\n  var lookup = ['T', 'R', 'W', 'A', 'G', 'M', 'Y', 'F', 'P', 'D', 'X', 'B', 'N', 'J', 'Z', 'S', 'Q', 'V', 'H', 'L', 'C', 'K', 'E'];\n  chars = chars.join('');\n  var checksum = parseInt(chars.slice(0, 8), 10) % 23;\n  return chars[8] === lookup[checksum];\n}\n/*\n * et-EE validation function\n * (Isikukood (IK), persons only)\n * Checks if birth date (century digit and six following) is valid and calculates check (last) digit\n * Material not in DG TAXUD document sourced from:\n * - `https://www.oecd.org/tax/automatic-exchange/crs-implementation-and-assistance/tax-identification-numbers/Estonia-TIN.pdf`\n */\n\n\nfunction etEeCheck(tin) {\n  // Extract year and add century\n  var full_year = tin.slice(1, 3);\n  var century_digit = tin.slice(0, 1);\n\n  switch (century_digit) {\n    case '1':\n    case '2':\n      full_year = \"18\".concat(full_year);\n      break;\n\n    case '3':\n    case '4':\n      full_year = \"19\".concat(full_year);\n      break;\n\n    default:\n      full_year = \"20\".concat(full_year);\n      break;\n  } // Check date validity\n\n\n  var date = \"\".concat(full_year, \"/\").concat(tin.slice(3, 5), \"/\").concat(tin.slice(5, 7));\n\n  if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {\n    return false;\n  } // Split digits into an array for further processing\n\n\n  var digits = tin.split('').map(function (a) {\n    return parseInt(a, 10);\n  });\n  var checksum = 0;\n  var weight = 1; // Multiply by weight and add to checksum\n\n  for (var i = 0; i < 10; i++) {\n    checksum += digits[i] * weight;\n    weight += 1;\n\n    if (weight === 10) {\n      weight = 1;\n    }\n  } // Do again if modulo 11 of checksum is 10\n\n\n  if (checksum % 11 === 10) {\n    checksum = 0;\n    weight = 3;\n\n    for (var _i3 = 0; _i3 < 10; _i3++) {\n      checksum += digits[_i3] * weight;\n      weight += 1;\n\n      if (weight === 10) {\n        weight = 1;\n      }\n    }\n\n    if (checksum % 11 === 10) {\n      return digits[10] === 0;\n    }\n  }\n\n  return checksum % 11 === digits[10];\n}\n/*\n * fi-FI validation function\n * (Henkilötunnus (HETU), persons only)\n * Checks if birth date (first six digits plus century symbol) is valid\n * and calculates check (last) digit\n */\n\n\nfunction fiFiCheck(tin) {\n  // Extract year and add century\n  var full_year = tin.slice(4, 6);\n  var century_symbol = tin.slice(6, 7);\n\n  switch (century_symbol) {\n    case '+':\n      full_year = \"18\".concat(full_year);\n      break;\n\n    case '-':\n      full_year = \"19\".concat(full_year);\n      break;\n\n    default:\n      full_year = \"20\".concat(full_year);\n      break;\n  } // Check date validity\n\n\n  var date = \"\".concat(full_year, \"/\").concat(tin.slice(2, 4), \"/\").concat(tin.slice(0, 2));\n\n  if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {\n    return false;\n  } // Calculate check character\n\n\n  var checksum = parseInt(tin.slice(0, 6) + tin.slice(7, 10), 10) % 31;\n\n  if (checksum < 10) {\n    return checksum === parseInt(tin.slice(10), 10);\n  }\n\n  checksum -= 10;\n  var letters_lookup = ['A', 'B', 'C', 'D', 'E', 'F', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y'];\n  return letters_lookup[checksum] === tin.slice(10);\n}\n/*\n * fr/nl-BE validation function\n * (Numéro national (N.N.), persons only)\n * Checks if birth date (first six digits) is valid and calculates check (last two) digits\n */\n\n\nfunction frBeCheck(tin) {\n  // Zero month/day value is acceptable\n  if (tin.slice(2, 4) !== '00' || tin.slice(4, 6) !== '00') {\n    // Extract date from first six digits of TIN\n    var date = \"\".concat(tin.slice(0, 2), \"/\").concat(tin.slice(2, 4), \"/\").concat(tin.slice(4, 6));\n\n    if (!(0, _isDate.default)(date, 'YY/MM/DD')) {\n      return false;\n    }\n  }\n\n  var checksum = 97 - parseInt(tin.slice(0, 9), 10) % 97;\n  var checkdigits = parseInt(tin.slice(9, 11), 10);\n\n  if (checksum !== checkdigits) {\n    checksum = 97 - parseInt(\"2\".concat(tin.slice(0, 9)), 10) % 97;\n\n    if (checksum !== checkdigits) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/*\n * fr-FR validation function\n * (Numéro fiscal de référence (numéro SPI), persons only)\n * Verify TIN validity by calculating check (last three) digits\n */\n\n\nfunction frFrCheck(tin) {\n  tin = tin.replace(/\\s/g, '');\n  var checksum = parseInt(tin.slice(0, 10), 10) % 511;\n  var checkdigits = parseInt(tin.slice(10, 13), 10);\n  return checksum === checkdigits;\n}\n/*\n * fr/lb-LU validation function\n * (numéro d’identification personnelle, persons only)\n * Verify birth date validity and run Luhn and Verhoeff checks\n */\n\n\nfunction frLuCheck(tin) {\n  // Extract date and check validity\n  var date = \"\".concat(tin.slice(0, 4), \"/\").concat(tin.slice(4, 6), \"/\").concat(tin.slice(6, 8));\n\n  if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {\n    return false;\n  } // Run Luhn check\n\n\n  if (!algorithms.luhnCheck(tin.slice(0, 12))) {\n    return false;\n  } // Remove Luhn check digit and run Verhoeff check\n\n\n  return algorithms.verhoeffCheck(\"\".concat(tin.slice(0, 11)).concat(tin[12]));\n}\n/*\n * hr-HR validation function\n * (Osobni identifikacijski broj (OIB), persons/entities)\n * Verify TIN validity by calling iso7064Check(digits)\n */\n\n\nfunction hrHrCheck(tin) {\n  return algorithms.iso7064Check(tin);\n}\n/*\n * hu-HU validation function\n * (Adóazonosító jel, persons only)\n * Verify TIN validity by calculating check (last) digit\n */\n\n\nfunction huHuCheck(tin) {\n  // split digits into an array for further processing\n  var digits = tin.split('').map(function (a) {\n    return parseInt(a, 10);\n  });\n  var checksum = 8;\n\n  for (var i = 1; i < 9; i++) {\n    checksum += digits[i] * (i + 1);\n  }\n\n  return checksum % 11 === digits[9];\n}\n/*\n * lt-LT validation function (should go here if needed)\n * (Asmens kodas, persons/entities respectively)\n * Current validation check is alias of etEeCheck- same format applies\n */\n\n/*\n * it-IT first/last name validity check\n * Accepts it-IT TIN-encoded names as a three-element character array and checks their validity\n * Due to lack of clarity between resources (\"Are only Italian consonants used?\n * What happens if a person has X in their name?\" etc.) only two test conditions\n * have been implemented:\n * Vowels may only be followed by other vowels or an X character\n * and X characters after vowels may only be followed by other X characters.\n */\n\n\nfunction itItNameCheck(name) {\n  // true at the first occurence of a vowel\n  var vowelflag = false; // true at the first occurence of an X AFTER vowel\n  // (to properly handle last names with X as consonant)\n\n  var xflag = false;\n\n  for (var i = 0; i < 3; i++) {\n    if (!vowelflag && /[AEIOU]/.test(name[i])) {\n      vowelflag = true;\n    } else if (!xflag && vowelflag && name[i] === 'X') {\n      xflag = true;\n    } else if (i > 0) {\n      if (vowelflag && !xflag) {\n        if (!/[AEIOU]/.test(name[i])) {\n          return false;\n        }\n      }\n\n      if (xflag) {\n        if (!/X/.test(name[i])) {\n          return false;\n        }\n      }\n    }\n  }\n\n  return true;\n}\n/*\n * it-IT validation function\n * (Codice fiscale (TIN-IT), persons only)\n * Verify name, birth date and codice catastale validity\n * and calculate check character.\n * Material not in DG-TAXUD document sourced from:\n * `https://en.wikipedia.org/wiki/Italian_fiscal_code`\n */\n\n\nfunction itItCheck(tin) {\n  // Capitalize and split characters into an array for further processing\n  var chars = tin.toUpperCase().split(''); // Check first and last name validity calling itItNameCheck()\n\n  if (!itItNameCheck(chars.slice(0, 3))) {\n    return false;\n  }\n\n  if (!itItNameCheck(chars.slice(3, 6))) {\n    return false;\n  } // Convert letters in number spaces back to numbers if any\n\n\n  var number_locations = [6, 7, 9, 10, 12, 13, 14];\n  var number_replace = {\n    L: '0',\n    M: '1',\n    N: '2',\n    P: '3',\n    Q: '4',\n    R: '5',\n    S: '6',\n    T: '7',\n    U: '8',\n    V: '9'\n  };\n\n  for (var _i4 = 0, _number_locations = number_locations; _i4 < _number_locations.length; _i4++) {\n    var i = _number_locations[_i4];\n\n    if (chars[i] in number_replace) {\n      chars.splice(i, 1, number_replace[chars[i]]);\n    }\n  } // Extract month and day, and check date validity\n\n\n  var month_replace = {\n    A: '01',\n    B: '02',\n    C: '03',\n    D: '04',\n    E: '05',\n    H: '06',\n    L: '07',\n    M: '08',\n    P: '09',\n    R: '10',\n    S: '11',\n    T: '12'\n  };\n  var month = month_replace[chars[8]];\n  var day = parseInt(chars[9] + chars[10], 10);\n\n  if (day > 40) {\n    day -= 40;\n  }\n\n  if (day < 10) {\n    day = \"0\".concat(day);\n  }\n\n  var date = \"\".concat(chars[6]).concat(chars[7], \"/\").concat(month, \"/\").concat(day);\n\n  if (!(0, _isDate.default)(date, 'YY/MM/DD')) {\n    return false;\n  } // Calculate check character by adding up even and odd characters as numbers\n\n\n  var checksum = 0;\n\n  for (var _i5 = 1; _i5 < chars.length - 1; _i5 += 2) {\n    var char_to_int = parseInt(chars[_i5], 10);\n\n    if (isNaN(char_to_int)) {\n      char_to_int = chars[_i5].charCodeAt(0) - 65;\n    }\n\n    checksum += char_to_int;\n  }\n\n  var odd_convert = {\n    // Maps of characters at odd places\n    A: 1,\n    B: 0,\n    C: 5,\n    D: 7,\n    E: 9,\n    F: 13,\n    G: 15,\n    H: 17,\n    I: 19,\n    J: 21,\n    K: 2,\n    L: 4,\n    M: 18,\n    N: 20,\n    O: 11,\n    P: 3,\n    Q: 6,\n    R: 8,\n    S: 12,\n    T: 14,\n    U: 16,\n    V: 10,\n    W: 22,\n    X: 25,\n    Y: 24,\n    Z: 23,\n    0: 1,\n    1: 0\n  };\n\n  for (var _i6 = 0; _i6 < chars.length - 1; _i6 += 2) {\n    var _char_to_int = 0;\n\n    if (chars[_i6] in odd_convert) {\n      _char_to_int = odd_convert[chars[_i6]];\n    } else {\n      var multiplier = parseInt(chars[_i6], 10);\n      _char_to_int = 2 * multiplier + 1;\n\n      if (multiplier > 4) {\n        _char_to_int += 2;\n      }\n    }\n\n    checksum += _char_to_int;\n  }\n\n  if (String.fromCharCode(65 + checksum % 26) !== chars[15]) {\n    return false;\n  }\n\n  return true;\n}\n/*\n * lv-LV validation function\n * (Personas kods (PK), persons only)\n * Check validity of birth date and calculate check (last) digit\n * Support only for old format numbers (not starting with '32', issued before 2017/07/01)\n * Material not in DG TAXUD document sourced from:\n * `https://boot.ritakafija.lv/forums/index.php?/topic/88314-personas-koda-algoritms-%C4%8Deksumma/`\n */\n\n\nfunction lvLvCheck(tin) {\n  tin = tin.replace(/\\W/, ''); // Extract date from TIN\n\n  var day = tin.slice(0, 2);\n\n  if (day !== '32') {\n    // No date/checksum check if new format\n    var month = tin.slice(2, 4);\n\n    if (month !== '00') {\n      // No date check if unknown month\n      var full_year = tin.slice(4, 6);\n\n      switch (tin[6]) {\n        case '0':\n          full_year = \"18\".concat(full_year);\n          break;\n\n        case '1':\n          full_year = \"19\".concat(full_year);\n          break;\n\n        default:\n          full_year = \"20\".concat(full_year);\n          break;\n      } // Check date validity\n\n\n      var date = \"\".concat(full_year, \"/\").concat(tin.slice(2, 4), \"/\").concat(day);\n\n      if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {\n        return false;\n      }\n    } // Calculate check digit\n\n\n    var checksum = 1101;\n    var multip_lookup = [1, 6, 3, 7, 9, 10, 5, 8, 4, 2];\n\n    for (var i = 0; i < tin.length - 1; i++) {\n      checksum -= parseInt(tin[i], 10) * multip_lookup[i];\n    }\n\n    return parseInt(tin[10], 10) === checksum % 11;\n  }\n\n  return true;\n}\n/*\n * mt-MT validation function\n * (Identity Card Number or Unique Taxpayer Reference, persons/entities)\n * Verify Identity Card Number structure (no other tests found)\n */\n\n\nfunction mtMtCheck(tin) {\n  if (tin.length !== 9) {\n    // No tests for UTR\n    var chars = tin.toUpperCase().split(''); // Fill with zeros if smaller than proper\n\n    while (chars.length < 8) {\n      chars.unshift(0);\n    } // Validate format according to last character\n\n\n    switch (tin[7]) {\n      case 'A':\n      case 'P':\n        if (parseInt(chars[6], 10) === 0) {\n          return false;\n        }\n\n        break;\n\n      default:\n        {\n          var first_part = parseInt(chars.join('').slice(0, 5), 10);\n\n          if (first_part > 32000) {\n            return false;\n          }\n\n          var second_part = parseInt(chars.join('').slice(5, 7), 10);\n\n          if (first_part === second_part) {\n            return false;\n          }\n        }\n    }\n  }\n\n  return true;\n}\n/*\n * nl-NL validation function\n * (Burgerservicenummer (BSN) or Rechtspersonen Samenwerkingsverbanden Informatie Nummer (RSIN),\n * persons/entities respectively)\n * Verify TIN validity by calculating check (last) digit (variant of MOD 11)\n */\n\n\nfunction nlNlCheck(tin) {\n  return algorithms.reverseMultiplyAndSum(tin.split('').slice(0, 8).map(function (a) {\n    return parseInt(a, 10);\n  }), 9) % 11 === parseInt(tin[8], 10);\n}\n/*\n * pl-PL validation function\n * (Powszechny Elektroniczny System Ewidencji Ludności (PESEL)\n * or Numer identyfikacji podatkowej (NIP), persons/entities)\n * Verify TIN validity by validating birth date (PESEL) and calculating check (last) digit\n */\n\n\nfunction plPlCheck(tin) {\n  // NIP\n  if (tin.length === 10) {\n    // Calculate last digit by multiplying with lookup\n    var lookup = [6, 5, 7, 2, 3, 4, 5, 6, 7];\n    var _checksum = 0;\n\n    for (var i = 0; i < lookup.length; i++) {\n      _checksum += parseInt(tin[i], 10) * lookup[i];\n    }\n\n    _checksum %= 11;\n\n    if (_checksum === 10) {\n      return false;\n    }\n\n    return _checksum === parseInt(tin[9], 10);\n  } // PESEL\n  // Extract full year using month\n\n\n  var full_year = tin.slice(0, 2);\n  var month = parseInt(tin.slice(2, 4), 10);\n\n  if (month > 80) {\n    full_year = \"18\".concat(full_year);\n    month -= 80;\n  } else if (month > 60) {\n    full_year = \"22\".concat(full_year);\n    month -= 60;\n  } else if (month > 40) {\n    full_year = \"21\".concat(full_year);\n    month -= 40;\n  } else if (month > 20) {\n    full_year = \"20\".concat(full_year);\n    month -= 20;\n  } else {\n    full_year = \"19\".concat(full_year);\n  } // Add leading zero to month if needed\n\n\n  if (month < 10) {\n    month = \"0\".concat(month);\n  } // Check date validity\n\n\n  var date = \"\".concat(full_year, \"/\").concat(month, \"/\").concat(tin.slice(4, 6));\n\n  if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {\n    return false;\n  } // Calculate last digit by mulitplying with odd one-digit numbers except 5\n\n\n  var checksum = 0;\n  var multiplier = 1;\n\n  for (var _i7 = 0; _i7 < tin.length - 1; _i7++) {\n    checksum += parseInt(tin[_i7], 10) * multiplier % 10;\n    multiplier += 2;\n\n    if (multiplier > 10) {\n      multiplier = 1;\n    } else if (multiplier === 5) {\n      multiplier += 2;\n    }\n  }\n\n  checksum = 10 - checksum % 10;\n  return checksum === parseInt(tin[10], 10);\n}\n/*\n* pt-BR validation function\n* (Cadastro de Pessoas Físicas (CPF, persons)\n* Cadastro Nacional de Pessoas Jurídicas (CNPJ, entities)\n* Both inputs will be validated\n*/\n\n\nfunction ptBrCheck(tin) {\n  if (tin.length === 11) {\n    var _sum;\n\n    var remainder;\n    _sum = 0;\n    if ( // Reject known invalid CPFs\n    tin === '11111111111' || tin === '22222222222' || tin === '33333333333' || tin === '44444444444' || tin === '55555555555' || tin === '66666666666' || tin === '77777777777' || tin === '88888888888' || tin === '99999999999' || tin === '00000000000') return false;\n\n    for (var i = 1; i <= 9; i++) {\n      _sum += parseInt(tin.substring(i - 1, i), 10) * (11 - i);\n    }\n\n    remainder = _sum * 10 % 11;\n    if (remainder === 10) remainder = 0;\n    if (remainder !== parseInt(tin.substring(9, 10), 10)) return false;\n    _sum = 0;\n\n    for (var _i8 = 1; _i8 <= 10; _i8++) {\n      _sum += parseInt(tin.substring(_i8 - 1, _i8), 10) * (12 - _i8);\n    }\n\n    remainder = _sum * 10 % 11;\n    if (remainder === 10) remainder = 0;\n    if (remainder !== parseInt(tin.substring(10, 11), 10)) return false;\n    return true;\n  }\n\n  if ( // Reject know invalid CNPJs\n  tin === '00000000000000' || tin === '11111111111111' || tin === '22222222222222' || tin === '33333333333333' || tin === '44444444444444' || tin === '55555555555555' || tin === '66666666666666' || tin === '77777777777777' || tin === '88888888888888' || tin === '99999999999999') {\n    return false;\n  }\n\n  var length = tin.length - 2;\n  var identifiers = tin.substring(0, length);\n  var verificators = tin.substring(length);\n  var sum = 0;\n  var pos = length - 7;\n\n  for (var _i9 = length; _i9 >= 1; _i9--) {\n    sum += identifiers.charAt(length - _i9) * pos;\n    pos -= 1;\n\n    if (pos < 2) {\n      pos = 9;\n    }\n  }\n\n  var result = sum % 11 < 2 ? 0 : 11 - sum % 11;\n\n  if (result !== parseInt(verificators.charAt(0), 10)) {\n    return false;\n  }\n\n  length += 1;\n  identifiers = tin.substring(0, length);\n  sum = 0;\n  pos = length - 7;\n\n  for (var _i10 = length; _i10 >= 1; _i10--) {\n    sum += identifiers.charAt(length - _i10) * pos;\n    pos -= 1;\n\n    if (pos < 2) {\n      pos = 9;\n    }\n  }\n\n  result = sum % 11 < 2 ? 0 : 11 - sum % 11;\n\n  if (result !== parseInt(verificators.charAt(1), 10)) {\n    return false;\n  }\n\n  return true;\n}\n/*\n * pt-PT validation function\n * (Número de identificação fiscal (NIF), persons/entities)\n * Verify TIN validity by calculating check (last) digit (variant of MOD 11)\n */\n\n\nfunction ptPtCheck(tin) {\n  var checksum = 11 - algorithms.reverseMultiplyAndSum(tin.split('').slice(0, 8).map(function (a) {\n    return parseInt(a, 10);\n  }), 9) % 11;\n\n  if (checksum > 9) {\n    return parseInt(tin[8], 10) === 0;\n  }\n\n  return checksum === parseInt(tin[8], 10);\n}\n/*\n * ro-RO validation function\n * (Cod Numeric Personal (CNP) or Cod de înregistrare fiscală (CIF),\n * persons only)\n * Verify CNP validity by calculating check (last) digit (test not found for CIF)\n * Material not in DG TAXUD document sourced from:\n * `https://en.wikipedia.org/wiki/National_identification_number#Romania`\n */\n\n\nfunction roRoCheck(tin) {\n  if (tin.slice(0, 4) !== '9000') {\n    // No test found for this format\n    // Extract full year using century digit if possible\n    var full_year = tin.slice(1, 3);\n\n    switch (tin[0]) {\n      case '1':\n      case '2':\n        full_year = \"19\".concat(full_year);\n        break;\n\n      case '3':\n      case '4':\n        full_year = \"18\".concat(full_year);\n        break;\n\n      case '5':\n      case '6':\n        full_year = \"20\".concat(full_year);\n        break;\n\n      default:\n    } // Check date validity\n\n\n    var date = \"\".concat(full_year, \"/\").concat(tin.slice(3, 5), \"/\").concat(tin.slice(5, 7));\n\n    if (date.length === 8) {\n      if (!(0, _isDate.default)(date, 'YY/MM/DD')) {\n        return false;\n      }\n    } else if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {\n      return false;\n    } // Calculate check digit\n\n\n    var digits = tin.split('').map(function (a) {\n      return parseInt(a, 10);\n    });\n    var multipliers = [2, 7, 9, 1, 4, 6, 3, 5, 8, 2, 7, 9];\n    var checksum = 0;\n\n    for (var i = 0; i < multipliers.length; i++) {\n      checksum += digits[i] * multipliers[i];\n    }\n\n    if (checksum % 11 === 10) {\n      return digits[12] === 1;\n    }\n\n    return digits[12] === checksum % 11;\n  }\n\n  return true;\n}\n/*\n * sk-SK validation function\n * (Rodné číslo (RČ) or bezvýznamové identifikačné číslo (BIČ), persons only)\n * Checks validity of pre-1954 birth numbers (rodné číslo) only\n * Due to the introduction of the pseudo-random BIČ it is not possible to test\n * post-1954 birth numbers without knowing whether they are BIČ or RČ beforehand\n */\n\n\nfunction skSkCheck(tin) {\n  if (tin.length === 9) {\n    tin = tin.replace(/\\W/, '');\n\n    if (tin.slice(6) === '000') {\n      return false;\n    } // Three-zero serial not assigned before 1954\n    // Extract full year from TIN length\n\n\n    var full_year = parseInt(tin.slice(0, 2), 10);\n\n    if (full_year > 53) {\n      return false;\n    }\n\n    if (full_year < 10) {\n      full_year = \"190\".concat(full_year);\n    } else {\n      full_year = \"19\".concat(full_year);\n    } // Extract month from TIN and normalize\n\n\n    var month = parseInt(tin.slice(2, 4), 10);\n\n    if (month > 50) {\n      month -= 50;\n    }\n\n    if (month < 10) {\n      month = \"0\".concat(month);\n    } // Check date validity\n\n\n    var date = \"\".concat(full_year, \"/\").concat(month, \"/\").concat(tin.slice(4, 6));\n\n    if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/*\n * sl-SI validation function\n * (Davčna številka, persons/entities)\n * Verify TIN validity by calculating check (last) digit (variant of MOD 11)\n */\n\n\nfunction slSiCheck(tin) {\n  var checksum = 11 - algorithms.reverseMultiplyAndSum(tin.split('').slice(0, 7).map(function (a) {\n    return parseInt(a, 10);\n  }), 8) % 11;\n\n  if (checksum === 10) {\n    return parseInt(tin[7], 10) === 0;\n  }\n\n  return checksum === parseInt(tin[7], 10);\n}\n/*\n * sv-SE validation function\n * (Personnummer or samordningsnummer, persons only)\n * Checks validity of birth date and calls luhnCheck() to validate check (last) digit\n */\n\n\nfunction svSeCheck(tin) {\n  // Make copy of TIN and normalize to two-digit year form\n  var tin_copy = tin.slice(0);\n\n  if (tin.length > 11) {\n    tin_copy = tin_copy.slice(2);\n  } // Extract date of birth\n\n\n  var full_year = '';\n  var month = tin_copy.slice(2, 4);\n  var day = parseInt(tin_copy.slice(4, 6), 10);\n\n  if (tin.length > 11) {\n    full_year = tin.slice(0, 4);\n  } else {\n    full_year = tin.slice(0, 2);\n\n    if (tin.length === 11 && day < 60) {\n      // Extract full year from centenarian symbol\n      // Should work just fine until year 10000 or so\n      var current_year = new Date().getFullYear().toString();\n      var current_century = parseInt(current_year.slice(0, 2), 10);\n      current_year = parseInt(current_year, 10);\n\n      if (tin[6] === '-') {\n        if (parseInt(\"\".concat(current_century).concat(full_year), 10) > current_year) {\n          full_year = \"\".concat(current_century - 1).concat(full_year);\n        } else {\n          full_year = \"\".concat(current_century).concat(full_year);\n        }\n      } else {\n        full_year = \"\".concat(current_century - 1).concat(full_year);\n\n        if (current_year - parseInt(full_year, 10) < 100) {\n          return false;\n        }\n      }\n    }\n  } // Normalize day and check date validity\n\n\n  if (day > 60) {\n    day -= 60;\n  }\n\n  if (day < 10) {\n    day = \"0\".concat(day);\n  }\n\n  var date = \"\".concat(full_year, \"/\").concat(month, \"/\").concat(day);\n\n  if (date.length === 8) {\n    if (!(0, _isDate.default)(date, 'YY/MM/DD')) {\n      return false;\n    }\n  } else if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {\n    return false;\n  }\n\n  return algorithms.luhnCheck(tin.replace(/\\W/, ''));\n} // Locale lookup objects\n\n/*\n * Tax id regex formats for various locales\n *\n * Where not explicitly specified in DG-TAXUD document both\n * uppercase and lowercase letters are acceptable.\n */\n\n\nvar taxIdFormat = {\n  'bg-BG': /^\\d{10}$/,\n  'cs-CZ': /^\\d{6}\\/{0,1}\\d{3,4}$/,\n  'de-AT': /^\\d{9}$/,\n  'de-DE': /^[1-9]\\d{10}$/,\n  'dk-DK': /^\\d{6}-{0,1}\\d{4}$/,\n  'el-CY': /^[09]\\d{7}[A-Z]$/,\n  'el-GR': /^([0-4]|[7-9])\\d{8}$/,\n  'en-CA': /^\\d{9}$/,\n  'en-GB': /^\\d{10}$|^(?!GB|NK|TN|ZZ)(?![DFIQUV])[A-Z](?![DFIQUVO])[A-Z]\\d{6}[ABCD ]$/i,\n  'en-IE': /^\\d{7}[A-W][A-IW]{0,1}$/i,\n  'en-US': /^\\d{2}[- ]{0,1}\\d{7}$/,\n  'es-ES': /^(\\d{0,8}|[XYZKLM]\\d{7})[A-HJ-NP-TV-Z]$/i,\n  'et-EE': /^[1-6]\\d{6}(00[1-9]|0[1-9][0-9]|[1-6][0-9]{2}|70[0-9]|710)\\d$/,\n  'fi-FI': /^\\d{6}[-+A]\\d{3}[0-9A-FHJ-NPR-Y]$/i,\n  'fr-BE': /^\\d{11}$/,\n  'fr-FR': /^[0-3]\\d{12}$|^[0-3]\\d\\s\\d{2}(\\s\\d{3}){3}$/,\n  // Conforms both to official spec and provided example\n  'fr-LU': /^\\d{13}$/,\n  'hr-HR': /^\\d{11}$/,\n  'hu-HU': /^8\\d{9}$/,\n  'it-IT': /^[A-Z]{6}[L-NP-V0-9]{2}[A-EHLMPRST][L-NP-V0-9]{2}[A-ILMZ][L-NP-V0-9]{3}[A-Z]$/i,\n  'lv-LV': /^\\d{6}-{0,1}\\d{5}$/,\n  // Conforms both to DG TAXUD spec and original research\n  'mt-MT': /^\\d{3,7}[APMGLHBZ]$|^([1-8])\\1\\d{7}$/i,\n  'nl-NL': /^\\d{9}$/,\n  'pl-PL': /^\\d{10,11}$/,\n  'pt-BR': /(?:^\\d{11}$)|(?:^\\d{14}$)/,\n  'pt-PT': /^\\d{9}$/,\n  'ro-RO': /^\\d{13}$/,\n  'sk-SK': /^\\d{6}\\/{0,1}\\d{3,4}$/,\n  'sl-SI': /^[1-9]\\d{7}$/,\n  'sv-SE': /^(\\d{6}[-+]{0,1}\\d{4}|(18|19|20)\\d{6}[-+]{0,1}\\d{4})$/\n}; // taxIdFormat locale aliases\n\ntaxIdFormat['lb-LU'] = taxIdFormat['fr-LU'];\ntaxIdFormat['lt-LT'] = taxIdFormat['et-EE'];\ntaxIdFormat['nl-BE'] = taxIdFormat['fr-BE'];\ntaxIdFormat['fr-CA'] = taxIdFormat['en-CA']; // Algorithmic tax id check functions for various locales\n\nvar taxIdCheck = {\n  'bg-BG': bgBgCheck,\n  'cs-CZ': csCzCheck,\n  'de-AT': deAtCheck,\n  'de-DE': deDeCheck,\n  'dk-DK': dkDkCheck,\n  'el-CY': elCyCheck,\n  'el-GR': elGrCheck,\n  'en-CA': isCanadianSIN,\n  'en-IE': enIeCheck,\n  'en-US': enUsCheck,\n  'es-ES': esEsCheck,\n  'et-EE': etEeCheck,\n  'fi-FI': fiFiCheck,\n  'fr-BE': frBeCheck,\n  'fr-FR': frFrCheck,\n  'fr-LU': frLuCheck,\n  'hr-HR': hrHrCheck,\n  'hu-HU': huHuCheck,\n  'it-IT': itItCheck,\n  'lv-LV': lvLvCheck,\n  'mt-MT': mtMtCheck,\n  'nl-NL': nlNlCheck,\n  'pl-PL': plPlCheck,\n  'pt-BR': ptBrCheck,\n  'pt-PT': ptPtCheck,\n  'ro-RO': roRoCheck,\n  'sk-SK': skSkCheck,\n  'sl-SI': slSiCheck,\n  'sv-SE': svSeCheck\n}; // taxIdCheck locale aliases\n\ntaxIdCheck['lb-LU'] = taxIdCheck['fr-LU'];\ntaxIdCheck['lt-LT'] = taxIdCheck['et-EE'];\ntaxIdCheck['nl-BE'] = taxIdCheck['fr-BE'];\ntaxIdCheck['fr-CA'] = taxIdCheck['en-CA']; // Regexes for locales where characters should be omitted before checking format\n\nvar allsymbols = /[-\\\\\\/!@#$%\\^&\\*\\(\\)\\+\\=\\[\\]]+/g;\nvar sanitizeRegexes = {\n  'de-AT': allsymbols,\n  'de-DE': /[\\/\\\\]/g,\n  'fr-BE': allsymbols\n}; // sanitizeRegexes locale aliases\n\nsanitizeRegexes['nl-BE'] = sanitizeRegexes['fr-BE'];\n/*\n * Validator function\n * Return true if the passed string is a valid tax identification number\n * for the specified locale.\n * Throw an error exception if the locale is not supported.\n */\n\nfunction isTaxID(str) {\n  var locale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'en-US';\n  (0, _assertString.default)(str); // Copy TIN to avoid replacement if sanitized\n\n  var strcopy = str.slice(0);\n\n  if (locale in taxIdFormat) {\n    if (locale in sanitizeRegexes) {\n      strcopy = strcopy.replace(sanitizeRegexes[locale], '');\n    }\n\n    if (!taxIdFormat[locale].test(strcopy)) {\n      return false;\n    }\n\n    if (locale in taxIdCheck) {\n      return taxIdCheck[locale](strcopy);\n    } // Fallthrough; not all locales have algorithmic checks\n\n\n    return true;\n  }\n\n  throw new Error(\"Invalid locale '\".concat(locale, \"'\"));\n}\n\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;","map":{"version":3,"names":["_typeof","obj","Symbol","iterator","constructor","prototype","Object","defineProperty","exports","value","default","isTaxID","_assertString","_interopRequireDefault","require","algorithms","_interopRequireWildcard","_isDate","_getRequireWildcardCache","WeakMap","cache","__esModule","has","get","newObj","hasPropertyDescriptor","getOwnPropertyDescriptor","key","hasOwnProperty","call","desc","set","_toConsumableArray","arr","_arrayWithoutHoles","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","TypeError","o","minLen","_arrayLikeToArray","n","toString","slice","name","Array","from","test","iter","isArray","len","length","i","arr2","bgBgCheck","tin","century_year","month","parseInt","concat","date","digits","split","map","a","multip_lookup","checksum","isCanadianSIN","input","digitsArray","even","filter","_","idx","Number","join","total","reduce","acc","cur","csCzCheck","replace","full_year","checkdigit","deAtCheck","luhnCheck","deDeCheck","occurences","push","j","trip_locations","recurrent","_i","iso7064Check","dkDkCheck","year","century_digit","weight","elCyCheck","_i2","String","fromCharCode","charAt","elGrCheck","Math","pow","enIeCheck","reverseMultiplyAndSum","charCodeAt","toUpperCase","enUsCampusPrefix","andover","atlanta","austin","brookhaven","cincinnati","fresno","internet","kansas","memphis","ogden","philadelphia","sba","enUsGetPrefixes","prefixes","location","apply","enUsCheck","indexOf","esEsCheck","chars","isNaN","lead_replace","splice","unshift","lookup","etEeCheck","_i3","fiFiCheck","century_symbol","letters_lookup","frBeCheck","checkdigits","frFrCheck","frLuCheck","verhoeffCheck","hrHrCheck","huHuCheck","itItNameCheck","vowelflag","xflag","itItCheck","number_locations","number_replace","L","M","N","P","Q","R","S","T","U","V","_i4","_number_locations","month_replace","A","B","C","D","E","H","day","_i5","char_to_int","odd_convert","F","G","I","J","K","O","W","X","Y","Z","_i6","_char_to_int","multiplier","lvLvCheck","mtMtCheck","first_part","second_part","nlNlCheck","plPlCheck","_checksum","_i7","ptBrCheck","_sum","remainder","substring","_i8","identifiers","verificators","sum","pos","_i9","result","_i10","ptPtCheck","roRoCheck","multipliers","skSkCheck","slSiCheck","svSeCheck","tin_copy","current_year","Date","getFullYear","current_century","taxIdFormat","taxIdCheck","allsymbols","sanitizeRegexes","str","locale","arguments","undefined","strcopy","Error","module"],"sources":["C:/Users/tauno/Documents/GitHub/React-02-23/bakery-shop/node_modules/validator/lib/isTaxID.js"],"sourcesContent":["\"use strict\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isTaxID;\n\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\n\nvar algorithms = _interopRequireWildcard(require(\"./util/algorithms\"));\n\nvar _isDate = _interopRequireDefault(require(\"./isDate\"));\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/**\n * TIN Validation\n * Validates Tax Identification Numbers (TINs) from the US, EU member states and the United Kingdom.\n *\n * EU-UK:\n * National TIN validity is calculated using public algorithms as made available by DG TAXUD.\n *\n * See `https://ec.europa.eu/taxation_customs/tin/specs/FS-TIN%20Algorithms-Public.docx` for more information.\n *\n * US:\n * An Employer Identification Number (EIN), also known as a Federal Tax Identification Number,\n *  is used to identify a business entity.\n *\n * NOTES:\n *  - Prefix 47 is being reserved for future use\n *  - Prefixes 26, 27, 45, 46 and 47 were previously assigned by the Philadelphia campus.\n *\n * See `http://www.irs.gov/Businesses/Small-Businesses-&-Self-Employed/How-EINs-are-Assigned-and-Valid-EIN-Prefixes`\n * for more information.\n */\n// Locale functions\n\n/*\n * bg-BG validation function\n * (Edinen graždanski nomer (EGN/ЕГН), persons only)\n * Checks if birth date (first six digits) is valid and calculates check (last) digit\n */\nfunction bgBgCheck(tin) {\n  // Extract full year, normalize month and check birth date validity\n  var century_year = tin.slice(0, 2);\n  var month = parseInt(tin.slice(2, 4), 10);\n\n  if (month > 40) {\n    month -= 40;\n    century_year = \"20\".concat(century_year);\n  } else if (month > 20) {\n    month -= 20;\n    century_year = \"18\".concat(century_year);\n  } else {\n    century_year = \"19\".concat(century_year);\n  }\n\n  if (month < 10) {\n    month = \"0\".concat(month);\n  }\n\n  var date = \"\".concat(century_year, \"/\").concat(month, \"/\").concat(tin.slice(4, 6));\n\n  if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {\n    return false;\n  } // split digits into an array for further processing\n\n\n  var digits = tin.split('').map(function (a) {\n    return parseInt(a, 10);\n  }); // Calculate checksum by multiplying digits with fixed values\n\n  var multip_lookup = [2, 4, 8, 5, 10, 9, 7, 3, 6];\n  var checksum = 0;\n\n  for (var i = 0; i < multip_lookup.length; i++) {\n    checksum += digits[i] * multip_lookup[i];\n  }\n\n  checksum = checksum % 11 === 10 ? 0 : checksum % 11;\n  return checksum === digits[9];\n}\n/**\n * Check if an input is a valid Canadian SIN (Social Insurance Number)\n *\n * The Social Insurance Number (SIN) is a 9 digit number that\n * you need to work in Canada or to have access to government programs and benefits.\n *\n * https://en.wikipedia.org/wiki/Social_Insurance_Number\n * https://www.canada.ca/en/employment-social-development/services/sin.html\n * https://www.codercrunch.com/challenge/819302488/sin-validator\n *\n * @param {string} input\n * @return {boolean}\n */\n\n\nfunction isCanadianSIN(input) {\n  var digitsArray = input.split('');\n  var even = digitsArray.filter(function (_, idx) {\n    return idx % 2;\n  }).map(function (i) {\n    return Number(i) * 2;\n  }).join('').split('');\n  var total = digitsArray.filter(function (_, idx) {\n    return !(idx % 2);\n  }).concat(even).map(function (i) {\n    return Number(i);\n  }).reduce(function (acc, cur) {\n    return acc + cur;\n  });\n  return total % 10 === 0;\n}\n/*\n * cs-CZ validation function\n * (Rodné číslo (RČ), persons only)\n * Checks if birth date (first six digits) is valid and divisibility by 11\n * Material not in DG TAXUD document sourced from:\n * -`https://lorenc.info/3MA381/overeni-spravnosti-rodneho-cisla.htm`\n * -`https://www.mvcr.cz/clanek/rady-a-sluzby-dokumenty-rodne-cislo.aspx`\n */\n\n\nfunction csCzCheck(tin) {\n  tin = tin.replace(/\\W/, ''); // Extract full year from TIN length\n\n  var full_year = parseInt(tin.slice(0, 2), 10);\n\n  if (tin.length === 10) {\n    if (full_year < 54) {\n      full_year = \"20\".concat(full_year);\n    } else {\n      full_year = \"19\".concat(full_year);\n    }\n  } else {\n    if (tin.slice(6) === '000') {\n      return false;\n    } // Three-zero serial not assigned before 1954\n\n\n    if (full_year < 54) {\n      full_year = \"19\".concat(full_year);\n    } else {\n      return false; // No 18XX years seen in any of the resources\n    }\n  } // Add missing zero if needed\n\n\n  if (full_year.length === 3) {\n    full_year = [full_year.slice(0, 2), '0', full_year.slice(2)].join('');\n  } // Extract month from TIN and normalize\n\n\n  var month = parseInt(tin.slice(2, 4), 10);\n\n  if (month > 50) {\n    month -= 50;\n  }\n\n  if (month > 20) {\n    // Month-plus-twenty was only introduced in 2004\n    if (parseInt(full_year, 10) < 2004) {\n      return false;\n    }\n\n    month -= 20;\n  }\n\n  if (month < 10) {\n    month = \"0\".concat(month);\n  } // Check date validity\n\n\n  var date = \"\".concat(full_year, \"/\").concat(month, \"/\").concat(tin.slice(4, 6));\n\n  if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {\n    return false;\n  } // Verify divisibility by 11\n\n\n  if (tin.length === 10) {\n    if (parseInt(tin, 10) % 11 !== 0) {\n      // Some numbers up to and including 1985 are still valid if\n      // check (last) digit equals 0 and modulo of first 9 digits equals 10\n      var checkdigit = parseInt(tin.slice(0, 9), 10) % 11;\n\n      if (parseInt(full_year, 10) < 1986 && checkdigit === 10) {\n        if (parseInt(tin.slice(9), 10) !== 0) {\n          return false;\n        }\n      } else {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n/*\n * de-AT validation function\n * (Abgabenkontonummer, persons/entities)\n * Verify TIN validity by calling luhnCheck()\n */\n\n\nfunction deAtCheck(tin) {\n  return algorithms.luhnCheck(tin);\n}\n/*\n * de-DE validation function\n * (Steueridentifikationsnummer (Steuer-IdNr.), persons only)\n * Tests for single duplicate/triplicate value, then calculates ISO 7064 check (last) digit\n * Partial implementation of spec (same result with both algorithms always)\n */\n\n\nfunction deDeCheck(tin) {\n  // Split digits into an array for further processing\n  var digits = tin.split('').map(function (a) {\n    return parseInt(a, 10);\n  }); // Fill array with strings of number positions\n\n  var occurences = [];\n\n  for (var i = 0; i < digits.length - 1; i++) {\n    occurences.push('');\n\n    for (var j = 0; j < digits.length - 1; j++) {\n      if (digits[i] === digits[j]) {\n        occurences[i] += j;\n      }\n    }\n  } // Remove digits with one occurence and test for only one duplicate/triplicate\n\n\n  occurences = occurences.filter(function (a) {\n    return a.length > 1;\n  });\n\n  if (occurences.length !== 2 && occurences.length !== 3) {\n    return false;\n  } // In case of triplicate value only two digits are allowed next to each other\n\n\n  if (occurences[0].length === 3) {\n    var trip_locations = occurences[0].split('').map(function (a) {\n      return parseInt(a, 10);\n    });\n    var recurrent = 0; // Amount of neighbour occurences\n\n    for (var _i = 0; _i < trip_locations.length - 1; _i++) {\n      if (trip_locations[_i] + 1 === trip_locations[_i + 1]) {\n        recurrent += 1;\n      }\n    }\n\n    if (recurrent === 2) {\n      return false;\n    }\n  }\n\n  return algorithms.iso7064Check(tin);\n}\n/*\n * dk-DK validation function\n * (CPR-nummer (personnummer), persons only)\n * Checks if birth date (first six digits) is valid and assigned to century (seventh) digit,\n * and calculates check (last) digit\n */\n\n\nfunction dkDkCheck(tin) {\n  tin = tin.replace(/\\W/, ''); // Extract year, check if valid for given century digit and add century\n\n  var year = parseInt(tin.slice(4, 6), 10);\n  var century_digit = tin.slice(6, 7);\n\n  switch (century_digit) {\n    case '0':\n    case '1':\n    case '2':\n    case '3':\n      year = \"19\".concat(year);\n      break;\n\n    case '4':\n    case '9':\n      if (year < 37) {\n        year = \"20\".concat(year);\n      } else {\n        year = \"19\".concat(year);\n      }\n\n      break;\n\n    default:\n      if (year < 37) {\n        year = \"20\".concat(year);\n      } else if (year > 58) {\n        year = \"18\".concat(year);\n      } else {\n        return false;\n      }\n\n      break;\n  } // Add missing zero if needed\n\n\n  if (year.length === 3) {\n    year = [year.slice(0, 2), '0', year.slice(2)].join('');\n  } // Check date validity\n\n\n  var date = \"\".concat(year, \"/\").concat(tin.slice(2, 4), \"/\").concat(tin.slice(0, 2));\n\n  if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {\n    return false;\n  } // Split digits into an array for further processing\n\n\n  var digits = tin.split('').map(function (a) {\n    return parseInt(a, 10);\n  });\n  var checksum = 0;\n  var weight = 4; // Multiply by weight and add to checksum\n\n  for (var i = 0; i < 9; i++) {\n    checksum += digits[i] * weight;\n    weight -= 1;\n\n    if (weight === 1) {\n      weight = 7;\n    }\n  }\n\n  checksum %= 11;\n\n  if (checksum === 1) {\n    return false;\n  }\n\n  return checksum === 0 ? digits[9] === 0 : digits[9] === 11 - checksum;\n}\n/*\n * el-CY validation function\n * (Arithmos Forologikou Mitroou (AFM/ΑΦΜ), persons only)\n * Verify TIN validity by calculating ASCII value of check (last) character\n */\n\n\nfunction elCyCheck(tin) {\n  // split digits into an array for further processing\n  var digits = tin.slice(0, 8).split('').map(function (a) {\n    return parseInt(a, 10);\n  });\n  var checksum = 0; // add digits in even places\n\n  for (var i = 1; i < digits.length; i += 2) {\n    checksum += digits[i];\n  } // add digits in odd places\n\n\n  for (var _i2 = 0; _i2 < digits.length; _i2 += 2) {\n    if (digits[_i2] < 2) {\n      checksum += 1 - digits[_i2];\n    } else {\n      checksum += 2 * (digits[_i2] - 2) + 5;\n\n      if (digits[_i2] > 4) {\n        checksum += 2;\n      }\n    }\n  }\n\n  return String.fromCharCode(checksum % 26 + 65) === tin.charAt(8);\n}\n/*\n * el-GR validation function\n * (Arithmos Forologikou Mitroou (AFM/ΑΦΜ), persons/entities)\n * Verify TIN validity by calculating check (last) digit\n * Algorithm not in DG TAXUD document- sourced from:\n * - `http://epixeirisi.gr/%CE%9A%CE%A1%CE%99%CE%A3%CE%99%CE%9C%CE%91-%CE%98%CE%95%CE%9C%CE%91%CE%A4%CE%91-%CE%A6%CE%9F%CE%A1%CE%9F%CE%9B%CE%9F%CE%93%CE%99%CE%91%CE%A3-%CE%9A%CE%91%CE%99-%CE%9B%CE%9F%CE%93%CE%99%CE%A3%CE%A4%CE%99%CE%9A%CE%97%CE%A3/23791/%CE%91%CF%81%CE%B9%CE%B8%CE%BC%CF%8C%CF%82-%CE%A6%CE%BF%CF%81%CE%BF%CE%BB%CE%BF%CE%B3%CE%B9%CE%BA%CE%BF%CF%8D-%CE%9C%CE%B7%CF%84%CF%81%CF%8E%CE%BF%CF%85`\n */\n\n\nfunction elGrCheck(tin) {\n  // split digits into an array for further processing\n  var digits = tin.split('').map(function (a) {\n    return parseInt(a, 10);\n  });\n  var checksum = 0;\n\n  for (var i = 0; i < 8; i++) {\n    checksum += digits[i] * Math.pow(2, 8 - i);\n  }\n\n  return checksum % 11 % 10 === digits[8];\n}\n/*\n * en-GB validation function (should go here if needed)\n * (National Insurance Number (NINO) or Unique Taxpayer Reference (UTR),\n * persons/entities respectively)\n */\n\n/*\n * en-IE validation function\n * (Personal Public Service Number (PPS No), persons only)\n * Verify TIN validity by calculating check (second to last) character\n */\n\n\nfunction enIeCheck(tin) {\n  var checksum = algorithms.reverseMultiplyAndSum(tin.split('').slice(0, 7).map(function (a) {\n    return parseInt(a, 10);\n  }), 8);\n\n  if (tin.length === 9 && tin[8] !== 'W') {\n    checksum += (tin[8].charCodeAt(0) - 64) * 9;\n  }\n\n  checksum %= 23;\n\n  if (checksum === 0) {\n    return tin[7].toUpperCase() === 'W';\n  }\n\n  return tin[7].toUpperCase() === String.fromCharCode(64 + checksum);\n} // Valid US IRS campus prefixes\n\n\nvar enUsCampusPrefix = {\n  andover: ['10', '12'],\n  atlanta: ['60', '67'],\n  austin: ['50', '53'],\n  brookhaven: ['01', '02', '03', '04', '05', '06', '11', '13', '14', '16', '21', '22', '23', '25', '34', '51', '52', '54', '55', '56', '57', '58', '59', '65'],\n  cincinnati: ['30', '32', '35', '36', '37', '38', '61'],\n  fresno: ['15', '24'],\n  internet: ['20', '26', '27', '45', '46', '47'],\n  kansas: ['40', '44'],\n  memphis: ['94', '95'],\n  ogden: ['80', '90'],\n  philadelphia: ['33', '39', '41', '42', '43', '46', '48', '62', '63', '64', '66', '68', '71', '72', '73', '74', '75', '76', '77', '81', '82', '83', '84', '85', '86', '87', '88', '91', '92', '93', '98', '99'],\n  sba: ['31']\n}; // Return an array of all US IRS campus prefixes\n\nfunction enUsGetPrefixes() {\n  var prefixes = [];\n\n  for (var location in enUsCampusPrefix) {\n    // https://github.com/gotwarlost/istanbul/blob/master/ignoring-code-for-coverage.md#ignoring-code-for-coverage-purposes\n    // istanbul ignore else\n    if (enUsCampusPrefix.hasOwnProperty(location)) {\n      prefixes.push.apply(prefixes, _toConsumableArray(enUsCampusPrefix[location]));\n    }\n  }\n\n  return prefixes;\n}\n/*\n * en-US validation function\n * Verify that the TIN starts with a valid IRS campus prefix\n */\n\n\nfunction enUsCheck(tin) {\n  return enUsGetPrefixes().indexOf(tin.slice(0, 2)) !== -1;\n}\n/*\n * es-ES validation function\n * (Documento Nacional de Identidad (DNI)\n * or Número de Identificación de Extranjero (NIE), persons only)\n * Verify TIN validity by calculating check (last) character\n */\n\n\nfunction esEsCheck(tin) {\n  // Split characters into an array for further processing\n  var chars = tin.toUpperCase().split(''); // Replace initial letter if needed\n\n  if (isNaN(parseInt(chars[0], 10)) && chars.length > 1) {\n    var lead_replace = 0;\n\n    switch (chars[0]) {\n      case 'Y':\n        lead_replace = 1;\n        break;\n\n      case 'Z':\n        lead_replace = 2;\n        break;\n\n      default:\n    }\n\n    chars.splice(0, 1, lead_replace); // Fill with zeros if smaller than proper\n  } else {\n    while (chars.length < 9) {\n      chars.unshift(0);\n    }\n  } // Calculate checksum and check according to lookup\n\n\n  var lookup = ['T', 'R', 'W', 'A', 'G', 'M', 'Y', 'F', 'P', 'D', 'X', 'B', 'N', 'J', 'Z', 'S', 'Q', 'V', 'H', 'L', 'C', 'K', 'E'];\n  chars = chars.join('');\n  var checksum = parseInt(chars.slice(0, 8), 10) % 23;\n  return chars[8] === lookup[checksum];\n}\n/*\n * et-EE validation function\n * (Isikukood (IK), persons only)\n * Checks if birth date (century digit and six following) is valid and calculates check (last) digit\n * Material not in DG TAXUD document sourced from:\n * - `https://www.oecd.org/tax/automatic-exchange/crs-implementation-and-assistance/tax-identification-numbers/Estonia-TIN.pdf`\n */\n\n\nfunction etEeCheck(tin) {\n  // Extract year and add century\n  var full_year = tin.slice(1, 3);\n  var century_digit = tin.slice(0, 1);\n\n  switch (century_digit) {\n    case '1':\n    case '2':\n      full_year = \"18\".concat(full_year);\n      break;\n\n    case '3':\n    case '4':\n      full_year = \"19\".concat(full_year);\n      break;\n\n    default:\n      full_year = \"20\".concat(full_year);\n      break;\n  } // Check date validity\n\n\n  var date = \"\".concat(full_year, \"/\").concat(tin.slice(3, 5), \"/\").concat(tin.slice(5, 7));\n\n  if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {\n    return false;\n  } // Split digits into an array for further processing\n\n\n  var digits = tin.split('').map(function (a) {\n    return parseInt(a, 10);\n  });\n  var checksum = 0;\n  var weight = 1; // Multiply by weight and add to checksum\n\n  for (var i = 0; i < 10; i++) {\n    checksum += digits[i] * weight;\n    weight += 1;\n\n    if (weight === 10) {\n      weight = 1;\n    }\n  } // Do again if modulo 11 of checksum is 10\n\n\n  if (checksum % 11 === 10) {\n    checksum = 0;\n    weight = 3;\n\n    for (var _i3 = 0; _i3 < 10; _i3++) {\n      checksum += digits[_i3] * weight;\n      weight += 1;\n\n      if (weight === 10) {\n        weight = 1;\n      }\n    }\n\n    if (checksum % 11 === 10) {\n      return digits[10] === 0;\n    }\n  }\n\n  return checksum % 11 === digits[10];\n}\n/*\n * fi-FI validation function\n * (Henkilötunnus (HETU), persons only)\n * Checks if birth date (first six digits plus century symbol) is valid\n * and calculates check (last) digit\n */\n\n\nfunction fiFiCheck(tin) {\n  // Extract year and add century\n  var full_year = tin.slice(4, 6);\n  var century_symbol = tin.slice(6, 7);\n\n  switch (century_symbol) {\n    case '+':\n      full_year = \"18\".concat(full_year);\n      break;\n\n    case '-':\n      full_year = \"19\".concat(full_year);\n      break;\n\n    default:\n      full_year = \"20\".concat(full_year);\n      break;\n  } // Check date validity\n\n\n  var date = \"\".concat(full_year, \"/\").concat(tin.slice(2, 4), \"/\").concat(tin.slice(0, 2));\n\n  if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {\n    return false;\n  } // Calculate check character\n\n\n  var checksum = parseInt(tin.slice(0, 6) + tin.slice(7, 10), 10) % 31;\n\n  if (checksum < 10) {\n    return checksum === parseInt(tin.slice(10), 10);\n  }\n\n  checksum -= 10;\n  var letters_lookup = ['A', 'B', 'C', 'D', 'E', 'F', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y'];\n  return letters_lookup[checksum] === tin.slice(10);\n}\n/*\n * fr/nl-BE validation function\n * (Numéro national (N.N.), persons only)\n * Checks if birth date (first six digits) is valid and calculates check (last two) digits\n */\n\n\nfunction frBeCheck(tin) {\n  // Zero month/day value is acceptable\n  if (tin.slice(2, 4) !== '00' || tin.slice(4, 6) !== '00') {\n    // Extract date from first six digits of TIN\n    var date = \"\".concat(tin.slice(0, 2), \"/\").concat(tin.slice(2, 4), \"/\").concat(tin.slice(4, 6));\n\n    if (!(0, _isDate.default)(date, 'YY/MM/DD')) {\n      return false;\n    }\n  }\n\n  var checksum = 97 - parseInt(tin.slice(0, 9), 10) % 97;\n  var checkdigits = parseInt(tin.slice(9, 11), 10);\n\n  if (checksum !== checkdigits) {\n    checksum = 97 - parseInt(\"2\".concat(tin.slice(0, 9)), 10) % 97;\n\n    if (checksum !== checkdigits) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/*\n * fr-FR validation function\n * (Numéro fiscal de référence (numéro SPI), persons only)\n * Verify TIN validity by calculating check (last three) digits\n */\n\n\nfunction frFrCheck(tin) {\n  tin = tin.replace(/\\s/g, '');\n  var checksum = parseInt(tin.slice(0, 10), 10) % 511;\n  var checkdigits = parseInt(tin.slice(10, 13), 10);\n  return checksum === checkdigits;\n}\n/*\n * fr/lb-LU validation function\n * (numéro d’identification personnelle, persons only)\n * Verify birth date validity and run Luhn and Verhoeff checks\n */\n\n\nfunction frLuCheck(tin) {\n  // Extract date and check validity\n  var date = \"\".concat(tin.slice(0, 4), \"/\").concat(tin.slice(4, 6), \"/\").concat(tin.slice(6, 8));\n\n  if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {\n    return false;\n  } // Run Luhn check\n\n\n  if (!algorithms.luhnCheck(tin.slice(0, 12))) {\n    return false;\n  } // Remove Luhn check digit and run Verhoeff check\n\n\n  return algorithms.verhoeffCheck(\"\".concat(tin.slice(0, 11)).concat(tin[12]));\n}\n/*\n * hr-HR validation function\n * (Osobni identifikacijski broj (OIB), persons/entities)\n * Verify TIN validity by calling iso7064Check(digits)\n */\n\n\nfunction hrHrCheck(tin) {\n  return algorithms.iso7064Check(tin);\n}\n/*\n * hu-HU validation function\n * (Adóazonosító jel, persons only)\n * Verify TIN validity by calculating check (last) digit\n */\n\n\nfunction huHuCheck(tin) {\n  // split digits into an array for further processing\n  var digits = tin.split('').map(function (a) {\n    return parseInt(a, 10);\n  });\n  var checksum = 8;\n\n  for (var i = 1; i < 9; i++) {\n    checksum += digits[i] * (i + 1);\n  }\n\n  return checksum % 11 === digits[9];\n}\n/*\n * lt-LT validation function (should go here if needed)\n * (Asmens kodas, persons/entities respectively)\n * Current validation check is alias of etEeCheck- same format applies\n */\n\n/*\n * it-IT first/last name validity check\n * Accepts it-IT TIN-encoded names as a three-element character array and checks their validity\n * Due to lack of clarity between resources (\"Are only Italian consonants used?\n * What happens if a person has X in their name?\" etc.) only two test conditions\n * have been implemented:\n * Vowels may only be followed by other vowels or an X character\n * and X characters after vowels may only be followed by other X characters.\n */\n\n\nfunction itItNameCheck(name) {\n  // true at the first occurence of a vowel\n  var vowelflag = false; // true at the first occurence of an X AFTER vowel\n  // (to properly handle last names with X as consonant)\n\n  var xflag = false;\n\n  for (var i = 0; i < 3; i++) {\n    if (!vowelflag && /[AEIOU]/.test(name[i])) {\n      vowelflag = true;\n    } else if (!xflag && vowelflag && name[i] === 'X') {\n      xflag = true;\n    } else if (i > 0) {\n      if (vowelflag && !xflag) {\n        if (!/[AEIOU]/.test(name[i])) {\n          return false;\n        }\n      }\n\n      if (xflag) {\n        if (!/X/.test(name[i])) {\n          return false;\n        }\n      }\n    }\n  }\n\n  return true;\n}\n/*\n * it-IT validation function\n * (Codice fiscale (TIN-IT), persons only)\n * Verify name, birth date and codice catastale validity\n * and calculate check character.\n * Material not in DG-TAXUD document sourced from:\n * `https://en.wikipedia.org/wiki/Italian_fiscal_code`\n */\n\n\nfunction itItCheck(tin) {\n  // Capitalize and split characters into an array for further processing\n  var chars = tin.toUpperCase().split(''); // Check first and last name validity calling itItNameCheck()\n\n  if (!itItNameCheck(chars.slice(0, 3))) {\n    return false;\n  }\n\n  if (!itItNameCheck(chars.slice(3, 6))) {\n    return false;\n  } // Convert letters in number spaces back to numbers if any\n\n\n  var number_locations = [6, 7, 9, 10, 12, 13, 14];\n  var number_replace = {\n    L: '0',\n    M: '1',\n    N: '2',\n    P: '3',\n    Q: '4',\n    R: '5',\n    S: '6',\n    T: '7',\n    U: '8',\n    V: '9'\n  };\n\n  for (var _i4 = 0, _number_locations = number_locations; _i4 < _number_locations.length; _i4++) {\n    var i = _number_locations[_i4];\n\n    if (chars[i] in number_replace) {\n      chars.splice(i, 1, number_replace[chars[i]]);\n    }\n  } // Extract month and day, and check date validity\n\n\n  var month_replace = {\n    A: '01',\n    B: '02',\n    C: '03',\n    D: '04',\n    E: '05',\n    H: '06',\n    L: '07',\n    M: '08',\n    P: '09',\n    R: '10',\n    S: '11',\n    T: '12'\n  };\n  var month = month_replace[chars[8]];\n  var day = parseInt(chars[9] + chars[10], 10);\n\n  if (day > 40) {\n    day -= 40;\n  }\n\n  if (day < 10) {\n    day = \"0\".concat(day);\n  }\n\n  var date = \"\".concat(chars[6]).concat(chars[7], \"/\").concat(month, \"/\").concat(day);\n\n  if (!(0, _isDate.default)(date, 'YY/MM/DD')) {\n    return false;\n  } // Calculate check character by adding up even and odd characters as numbers\n\n\n  var checksum = 0;\n\n  for (var _i5 = 1; _i5 < chars.length - 1; _i5 += 2) {\n    var char_to_int = parseInt(chars[_i5], 10);\n\n    if (isNaN(char_to_int)) {\n      char_to_int = chars[_i5].charCodeAt(0) - 65;\n    }\n\n    checksum += char_to_int;\n  }\n\n  var odd_convert = {\n    // Maps of characters at odd places\n    A: 1,\n    B: 0,\n    C: 5,\n    D: 7,\n    E: 9,\n    F: 13,\n    G: 15,\n    H: 17,\n    I: 19,\n    J: 21,\n    K: 2,\n    L: 4,\n    M: 18,\n    N: 20,\n    O: 11,\n    P: 3,\n    Q: 6,\n    R: 8,\n    S: 12,\n    T: 14,\n    U: 16,\n    V: 10,\n    W: 22,\n    X: 25,\n    Y: 24,\n    Z: 23,\n    0: 1,\n    1: 0\n  };\n\n  for (var _i6 = 0; _i6 < chars.length - 1; _i6 += 2) {\n    var _char_to_int = 0;\n\n    if (chars[_i6] in odd_convert) {\n      _char_to_int = odd_convert[chars[_i6]];\n    } else {\n      var multiplier = parseInt(chars[_i6], 10);\n      _char_to_int = 2 * multiplier + 1;\n\n      if (multiplier > 4) {\n        _char_to_int += 2;\n      }\n    }\n\n    checksum += _char_to_int;\n  }\n\n  if (String.fromCharCode(65 + checksum % 26) !== chars[15]) {\n    return false;\n  }\n\n  return true;\n}\n/*\n * lv-LV validation function\n * (Personas kods (PK), persons only)\n * Check validity of birth date and calculate check (last) digit\n * Support only for old format numbers (not starting with '32', issued before 2017/07/01)\n * Material not in DG TAXUD document sourced from:\n * `https://boot.ritakafija.lv/forums/index.php?/topic/88314-personas-koda-algoritms-%C4%8Deksumma/`\n */\n\n\nfunction lvLvCheck(tin) {\n  tin = tin.replace(/\\W/, ''); // Extract date from TIN\n\n  var day = tin.slice(0, 2);\n\n  if (day !== '32') {\n    // No date/checksum check if new format\n    var month = tin.slice(2, 4);\n\n    if (month !== '00') {\n      // No date check if unknown month\n      var full_year = tin.slice(4, 6);\n\n      switch (tin[6]) {\n        case '0':\n          full_year = \"18\".concat(full_year);\n          break;\n\n        case '1':\n          full_year = \"19\".concat(full_year);\n          break;\n\n        default:\n          full_year = \"20\".concat(full_year);\n          break;\n      } // Check date validity\n\n\n      var date = \"\".concat(full_year, \"/\").concat(tin.slice(2, 4), \"/\").concat(day);\n\n      if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {\n        return false;\n      }\n    } // Calculate check digit\n\n\n    var checksum = 1101;\n    var multip_lookup = [1, 6, 3, 7, 9, 10, 5, 8, 4, 2];\n\n    for (var i = 0; i < tin.length - 1; i++) {\n      checksum -= parseInt(tin[i], 10) * multip_lookup[i];\n    }\n\n    return parseInt(tin[10], 10) === checksum % 11;\n  }\n\n  return true;\n}\n/*\n * mt-MT validation function\n * (Identity Card Number or Unique Taxpayer Reference, persons/entities)\n * Verify Identity Card Number structure (no other tests found)\n */\n\n\nfunction mtMtCheck(tin) {\n  if (tin.length !== 9) {\n    // No tests for UTR\n    var chars = tin.toUpperCase().split(''); // Fill with zeros if smaller than proper\n\n    while (chars.length < 8) {\n      chars.unshift(0);\n    } // Validate format according to last character\n\n\n    switch (tin[7]) {\n      case 'A':\n      case 'P':\n        if (parseInt(chars[6], 10) === 0) {\n          return false;\n        }\n\n        break;\n\n      default:\n        {\n          var first_part = parseInt(chars.join('').slice(0, 5), 10);\n\n          if (first_part > 32000) {\n            return false;\n          }\n\n          var second_part = parseInt(chars.join('').slice(5, 7), 10);\n\n          if (first_part === second_part) {\n            return false;\n          }\n        }\n    }\n  }\n\n  return true;\n}\n/*\n * nl-NL validation function\n * (Burgerservicenummer (BSN) or Rechtspersonen Samenwerkingsverbanden Informatie Nummer (RSIN),\n * persons/entities respectively)\n * Verify TIN validity by calculating check (last) digit (variant of MOD 11)\n */\n\n\nfunction nlNlCheck(tin) {\n  return algorithms.reverseMultiplyAndSum(tin.split('').slice(0, 8).map(function (a) {\n    return parseInt(a, 10);\n  }), 9) % 11 === parseInt(tin[8], 10);\n}\n/*\n * pl-PL validation function\n * (Powszechny Elektroniczny System Ewidencji Ludności (PESEL)\n * or Numer identyfikacji podatkowej (NIP), persons/entities)\n * Verify TIN validity by validating birth date (PESEL) and calculating check (last) digit\n */\n\n\nfunction plPlCheck(tin) {\n  // NIP\n  if (tin.length === 10) {\n    // Calculate last digit by multiplying with lookup\n    var lookup = [6, 5, 7, 2, 3, 4, 5, 6, 7];\n    var _checksum = 0;\n\n    for (var i = 0; i < lookup.length; i++) {\n      _checksum += parseInt(tin[i], 10) * lookup[i];\n    }\n\n    _checksum %= 11;\n\n    if (_checksum === 10) {\n      return false;\n    }\n\n    return _checksum === parseInt(tin[9], 10);\n  } // PESEL\n  // Extract full year using month\n\n\n  var full_year = tin.slice(0, 2);\n  var month = parseInt(tin.slice(2, 4), 10);\n\n  if (month > 80) {\n    full_year = \"18\".concat(full_year);\n    month -= 80;\n  } else if (month > 60) {\n    full_year = \"22\".concat(full_year);\n    month -= 60;\n  } else if (month > 40) {\n    full_year = \"21\".concat(full_year);\n    month -= 40;\n  } else if (month > 20) {\n    full_year = \"20\".concat(full_year);\n    month -= 20;\n  } else {\n    full_year = \"19\".concat(full_year);\n  } // Add leading zero to month if needed\n\n\n  if (month < 10) {\n    month = \"0\".concat(month);\n  } // Check date validity\n\n\n  var date = \"\".concat(full_year, \"/\").concat(month, \"/\").concat(tin.slice(4, 6));\n\n  if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {\n    return false;\n  } // Calculate last digit by mulitplying with odd one-digit numbers except 5\n\n\n  var checksum = 0;\n  var multiplier = 1;\n\n  for (var _i7 = 0; _i7 < tin.length - 1; _i7++) {\n    checksum += parseInt(tin[_i7], 10) * multiplier % 10;\n    multiplier += 2;\n\n    if (multiplier > 10) {\n      multiplier = 1;\n    } else if (multiplier === 5) {\n      multiplier += 2;\n    }\n  }\n\n  checksum = 10 - checksum % 10;\n  return checksum === parseInt(tin[10], 10);\n}\n/*\n* pt-BR validation function\n* (Cadastro de Pessoas Físicas (CPF, persons)\n* Cadastro Nacional de Pessoas Jurídicas (CNPJ, entities)\n* Both inputs will be validated\n*/\n\n\nfunction ptBrCheck(tin) {\n  if (tin.length === 11) {\n    var _sum;\n\n    var remainder;\n    _sum = 0;\n    if ( // Reject known invalid CPFs\n    tin === '11111111111' || tin === '22222222222' || tin === '33333333333' || tin === '44444444444' || tin === '55555555555' || tin === '66666666666' || tin === '77777777777' || tin === '88888888888' || tin === '99999999999' || tin === '00000000000') return false;\n\n    for (var i = 1; i <= 9; i++) {\n      _sum += parseInt(tin.substring(i - 1, i), 10) * (11 - i);\n    }\n\n    remainder = _sum * 10 % 11;\n    if (remainder === 10) remainder = 0;\n    if (remainder !== parseInt(tin.substring(9, 10), 10)) return false;\n    _sum = 0;\n\n    for (var _i8 = 1; _i8 <= 10; _i8++) {\n      _sum += parseInt(tin.substring(_i8 - 1, _i8), 10) * (12 - _i8);\n    }\n\n    remainder = _sum * 10 % 11;\n    if (remainder === 10) remainder = 0;\n    if (remainder !== parseInt(tin.substring(10, 11), 10)) return false;\n    return true;\n  }\n\n  if ( // Reject know invalid CNPJs\n  tin === '00000000000000' || tin === '11111111111111' || tin === '22222222222222' || tin === '33333333333333' || tin === '44444444444444' || tin === '55555555555555' || tin === '66666666666666' || tin === '77777777777777' || tin === '88888888888888' || tin === '99999999999999') {\n    return false;\n  }\n\n  var length = tin.length - 2;\n  var identifiers = tin.substring(0, length);\n  var verificators = tin.substring(length);\n  var sum = 0;\n  var pos = length - 7;\n\n  for (var _i9 = length; _i9 >= 1; _i9--) {\n    sum += identifiers.charAt(length - _i9) * pos;\n    pos -= 1;\n\n    if (pos < 2) {\n      pos = 9;\n    }\n  }\n\n  var result = sum % 11 < 2 ? 0 : 11 - sum % 11;\n\n  if (result !== parseInt(verificators.charAt(0), 10)) {\n    return false;\n  }\n\n  length += 1;\n  identifiers = tin.substring(0, length);\n  sum = 0;\n  pos = length - 7;\n\n  for (var _i10 = length; _i10 >= 1; _i10--) {\n    sum += identifiers.charAt(length - _i10) * pos;\n    pos -= 1;\n\n    if (pos < 2) {\n      pos = 9;\n    }\n  }\n\n  result = sum % 11 < 2 ? 0 : 11 - sum % 11;\n\n  if (result !== parseInt(verificators.charAt(1), 10)) {\n    return false;\n  }\n\n  return true;\n}\n/*\n * pt-PT validation function\n * (Número de identificação fiscal (NIF), persons/entities)\n * Verify TIN validity by calculating check (last) digit (variant of MOD 11)\n */\n\n\nfunction ptPtCheck(tin) {\n  var checksum = 11 - algorithms.reverseMultiplyAndSum(tin.split('').slice(0, 8).map(function (a) {\n    return parseInt(a, 10);\n  }), 9) % 11;\n\n  if (checksum > 9) {\n    return parseInt(tin[8], 10) === 0;\n  }\n\n  return checksum === parseInt(tin[8], 10);\n}\n/*\n * ro-RO validation function\n * (Cod Numeric Personal (CNP) or Cod de înregistrare fiscală (CIF),\n * persons only)\n * Verify CNP validity by calculating check (last) digit (test not found for CIF)\n * Material not in DG TAXUD document sourced from:\n * `https://en.wikipedia.org/wiki/National_identification_number#Romania`\n */\n\n\nfunction roRoCheck(tin) {\n  if (tin.slice(0, 4) !== '9000') {\n    // No test found for this format\n    // Extract full year using century digit if possible\n    var full_year = tin.slice(1, 3);\n\n    switch (tin[0]) {\n      case '1':\n      case '2':\n        full_year = \"19\".concat(full_year);\n        break;\n\n      case '3':\n      case '4':\n        full_year = \"18\".concat(full_year);\n        break;\n\n      case '5':\n      case '6':\n        full_year = \"20\".concat(full_year);\n        break;\n\n      default:\n    } // Check date validity\n\n\n    var date = \"\".concat(full_year, \"/\").concat(tin.slice(3, 5), \"/\").concat(tin.slice(5, 7));\n\n    if (date.length === 8) {\n      if (!(0, _isDate.default)(date, 'YY/MM/DD')) {\n        return false;\n      }\n    } else if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {\n      return false;\n    } // Calculate check digit\n\n\n    var digits = tin.split('').map(function (a) {\n      return parseInt(a, 10);\n    });\n    var multipliers = [2, 7, 9, 1, 4, 6, 3, 5, 8, 2, 7, 9];\n    var checksum = 0;\n\n    for (var i = 0; i < multipliers.length; i++) {\n      checksum += digits[i] * multipliers[i];\n    }\n\n    if (checksum % 11 === 10) {\n      return digits[12] === 1;\n    }\n\n    return digits[12] === checksum % 11;\n  }\n\n  return true;\n}\n/*\n * sk-SK validation function\n * (Rodné číslo (RČ) or bezvýznamové identifikačné číslo (BIČ), persons only)\n * Checks validity of pre-1954 birth numbers (rodné číslo) only\n * Due to the introduction of the pseudo-random BIČ it is not possible to test\n * post-1954 birth numbers without knowing whether they are BIČ or RČ beforehand\n */\n\n\nfunction skSkCheck(tin) {\n  if (tin.length === 9) {\n    tin = tin.replace(/\\W/, '');\n\n    if (tin.slice(6) === '000') {\n      return false;\n    } // Three-zero serial not assigned before 1954\n    // Extract full year from TIN length\n\n\n    var full_year = parseInt(tin.slice(0, 2), 10);\n\n    if (full_year > 53) {\n      return false;\n    }\n\n    if (full_year < 10) {\n      full_year = \"190\".concat(full_year);\n    } else {\n      full_year = \"19\".concat(full_year);\n    } // Extract month from TIN and normalize\n\n\n    var month = parseInt(tin.slice(2, 4), 10);\n\n    if (month > 50) {\n      month -= 50;\n    }\n\n    if (month < 10) {\n      month = \"0\".concat(month);\n    } // Check date validity\n\n\n    var date = \"\".concat(full_year, \"/\").concat(month, \"/\").concat(tin.slice(4, 6));\n\n    if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/*\n * sl-SI validation function\n * (Davčna številka, persons/entities)\n * Verify TIN validity by calculating check (last) digit (variant of MOD 11)\n */\n\n\nfunction slSiCheck(tin) {\n  var checksum = 11 - algorithms.reverseMultiplyAndSum(tin.split('').slice(0, 7).map(function (a) {\n    return parseInt(a, 10);\n  }), 8) % 11;\n\n  if (checksum === 10) {\n    return parseInt(tin[7], 10) === 0;\n  }\n\n  return checksum === parseInt(tin[7], 10);\n}\n/*\n * sv-SE validation function\n * (Personnummer or samordningsnummer, persons only)\n * Checks validity of birth date and calls luhnCheck() to validate check (last) digit\n */\n\n\nfunction svSeCheck(tin) {\n  // Make copy of TIN and normalize to two-digit year form\n  var tin_copy = tin.slice(0);\n\n  if (tin.length > 11) {\n    tin_copy = tin_copy.slice(2);\n  } // Extract date of birth\n\n\n  var full_year = '';\n  var month = tin_copy.slice(2, 4);\n  var day = parseInt(tin_copy.slice(4, 6), 10);\n\n  if (tin.length > 11) {\n    full_year = tin.slice(0, 4);\n  } else {\n    full_year = tin.slice(0, 2);\n\n    if (tin.length === 11 && day < 60) {\n      // Extract full year from centenarian symbol\n      // Should work just fine until year 10000 or so\n      var current_year = new Date().getFullYear().toString();\n      var current_century = parseInt(current_year.slice(0, 2), 10);\n      current_year = parseInt(current_year, 10);\n\n      if (tin[6] === '-') {\n        if (parseInt(\"\".concat(current_century).concat(full_year), 10) > current_year) {\n          full_year = \"\".concat(current_century - 1).concat(full_year);\n        } else {\n          full_year = \"\".concat(current_century).concat(full_year);\n        }\n      } else {\n        full_year = \"\".concat(current_century - 1).concat(full_year);\n\n        if (current_year - parseInt(full_year, 10) < 100) {\n          return false;\n        }\n      }\n    }\n  } // Normalize day and check date validity\n\n\n  if (day > 60) {\n    day -= 60;\n  }\n\n  if (day < 10) {\n    day = \"0\".concat(day);\n  }\n\n  var date = \"\".concat(full_year, \"/\").concat(month, \"/\").concat(day);\n\n  if (date.length === 8) {\n    if (!(0, _isDate.default)(date, 'YY/MM/DD')) {\n      return false;\n    }\n  } else if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {\n    return false;\n  }\n\n  return algorithms.luhnCheck(tin.replace(/\\W/, ''));\n} // Locale lookup objects\n\n/*\n * Tax id regex formats for various locales\n *\n * Where not explicitly specified in DG-TAXUD document both\n * uppercase and lowercase letters are acceptable.\n */\n\n\nvar taxIdFormat = {\n  'bg-BG': /^\\d{10}$/,\n  'cs-CZ': /^\\d{6}\\/{0,1}\\d{3,4}$/,\n  'de-AT': /^\\d{9}$/,\n  'de-DE': /^[1-9]\\d{10}$/,\n  'dk-DK': /^\\d{6}-{0,1}\\d{4}$/,\n  'el-CY': /^[09]\\d{7}[A-Z]$/,\n  'el-GR': /^([0-4]|[7-9])\\d{8}$/,\n  'en-CA': /^\\d{9}$/,\n  'en-GB': /^\\d{10}$|^(?!GB|NK|TN|ZZ)(?![DFIQUV])[A-Z](?![DFIQUVO])[A-Z]\\d{6}[ABCD ]$/i,\n  'en-IE': /^\\d{7}[A-W][A-IW]{0,1}$/i,\n  'en-US': /^\\d{2}[- ]{0,1}\\d{7}$/,\n  'es-ES': /^(\\d{0,8}|[XYZKLM]\\d{7})[A-HJ-NP-TV-Z]$/i,\n  'et-EE': /^[1-6]\\d{6}(00[1-9]|0[1-9][0-9]|[1-6][0-9]{2}|70[0-9]|710)\\d$/,\n  'fi-FI': /^\\d{6}[-+A]\\d{3}[0-9A-FHJ-NPR-Y]$/i,\n  'fr-BE': /^\\d{11}$/,\n  'fr-FR': /^[0-3]\\d{12}$|^[0-3]\\d\\s\\d{2}(\\s\\d{3}){3}$/,\n  // Conforms both to official spec and provided example\n  'fr-LU': /^\\d{13}$/,\n  'hr-HR': /^\\d{11}$/,\n  'hu-HU': /^8\\d{9}$/,\n  'it-IT': /^[A-Z]{6}[L-NP-V0-9]{2}[A-EHLMPRST][L-NP-V0-9]{2}[A-ILMZ][L-NP-V0-9]{3}[A-Z]$/i,\n  'lv-LV': /^\\d{6}-{0,1}\\d{5}$/,\n  // Conforms both to DG TAXUD spec and original research\n  'mt-MT': /^\\d{3,7}[APMGLHBZ]$|^([1-8])\\1\\d{7}$/i,\n  'nl-NL': /^\\d{9}$/,\n  'pl-PL': /^\\d{10,11}$/,\n  'pt-BR': /(?:^\\d{11}$)|(?:^\\d{14}$)/,\n  'pt-PT': /^\\d{9}$/,\n  'ro-RO': /^\\d{13}$/,\n  'sk-SK': /^\\d{6}\\/{0,1}\\d{3,4}$/,\n  'sl-SI': /^[1-9]\\d{7}$/,\n  'sv-SE': /^(\\d{6}[-+]{0,1}\\d{4}|(18|19|20)\\d{6}[-+]{0,1}\\d{4})$/\n}; // taxIdFormat locale aliases\n\ntaxIdFormat['lb-LU'] = taxIdFormat['fr-LU'];\ntaxIdFormat['lt-LT'] = taxIdFormat['et-EE'];\ntaxIdFormat['nl-BE'] = taxIdFormat['fr-BE'];\ntaxIdFormat['fr-CA'] = taxIdFormat['en-CA']; // Algorithmic tax id check functions for various locales\n\nvar taxIdCheck = {\n  'bg-BG': bgBgCheck,\n  'cs-CZ': csCzCheck,\n  'de-AT': deAtCheck,\n  'de-DE': deDeCheck,\n  'dk-DK': dkDkCheck,\n  'el-CY': elCyCheck,\n  'el-GR': elGrCheck,\n  'en-CA': isCanadianSIN,\n  'en-IE': enIeCheck,\n  'en-US': enUsCheck,\n  'es-ES': esEsCheck,\n  'et-EE': etEeCheck,\n  'fi-FI': fiFiCheck,\n  'fr-BE': frBeCheck,\n  'fr-FR': frFrCheck,\n  'fr-LU': frLuCheck,\n  'hr-HR': hrHrCheck,\n  'hu-HU': huHuCheck,\n  'it-IT': itItCheck,\n  'lv-LV': lvLvCheck,\n  'mt-MT': mtMtCheck,\n  'nl-NL': nlNlCheck,\n  'pl-PL': plPlCheck,\n  'pt-BR': ptBrCheck,\n  'pt-PT': ptPtCheck,\n  'ro-RO': roRoCheck,\n  'sk-SK': skSkCheck,\n  'sl-SI': slSiCheck,\n  'sv-SE': svSeCheck\n}; // taxIdCheck locale aliases\n\ntaxIdCheck['lb-LU'] = taxIdCheck['fr-LU'];\ntaxIdCheck['lt-LT'] = taxIdCheck['et-EE'];\ntaxIdCheck['nl-BE'] = taxIdCheck['fr-BE'];\ntaxIdCheck['fr-CA'] = taxIdCheck['en-CA']; // Regexes for locales where characters should be omitted before checking format\n\nvar allsymbols = /[-\\\\\\/!@#$%\\^&\\*\\(\\)\\+\\=\\[\\]]+/g;\nvar sanitizeRegexes = {\n  'de-AT': allsymbols,\n  'de-DE': /[\\/\\\\]/g,\n  'fr-BE': allsymbols\n}; // sanitizeRegexes locale aliases\n\nsanitizeRegexes['nl-BE'] = sanitizeRegexes['fr-BE'];\n/*\n * Validator function\n * Return true if the passed string is a valid tax identification number\n * for the specified locale.\n * Throw an error exception if the locale is not supported.\n */\n\nfunction isTaxID(str) {\n  var locale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'en-US';\n  (0, _assertString.default)(str); // Copy TIN to avoid replacement if sanitized\n\n  var strcopy = str.slice(0);\n\n  if (locale in taxIdFormat) {\n    if (locale in sanitizeRegexes) {\n      strcopy = strcopy.replace(sanitizeRegexes[locale], '');\n    }\n\n    if (!taxIdFormat[locale].test(strcopy)) {\n      return false;\n    }\n\n    if (locale in taxIdCheck) {\n      return taxIdCheck[locale](strcopy);\n    } // Fallthrough; not all locales have algorithmic checks\n\n\n    return true;\n  }\n\n  throw new Error(\"Invalid locale '\".concat(locale, \"'\"));\n}\n\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;"],"mappings":"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"},"metadata":{},"sourceType":"script"}